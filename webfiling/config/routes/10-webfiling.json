{
  "name": "Web Filing",
  "baseURI": "https://&{application.host}",
  "condition": "${request.uri.host != '&{application.legacy.host}'}",
  "globalDecorators": {
    "capture": "all"
  },
  "heap": [
    {
      "name": "ReverseProxyHandler",
      "type": "ReverseProxyHandler",
      "capture": [
        "request",
        "response"
      ],
      "config": {
        "tls": {
          "type": "ClientTlsOptions",
          "config": {
            "trustManager": {
              "type": "TrustAllManager"
            }
          }
        },
        "connectionTimeout": "60 seconds",
        "soTimeout": "60 seconds",
        "hostnameVerifier": "ALLOW_ALL"
      }
    },
    {
      "name": "SystemAndEnvSecretStore-FIDC",
      "type": "SystemAndEnvSecretStore",
      "config": {
        "format": "PLAIN"
      }
    },
    {
      "name": "Issuer-FIDC",
      "type": "Issuer",
      "config": {
        "wellKnownEndpoint": "https://&{fidc.fqdn}/am/oauth2/realms/root/realms/&{fidc.realm}/.well-known/openid-configuration"
      }
    },
    {
      "name": "ClientRegistration-FIDC",
      "type": "ClientRegistration",
      "config": {
        "clientId": "&{oidc.client.id}",
        "clientSecretId": "oidc.client.secret",
        "issuer": "Issuer-FIDC",
        "secretsProvider": "SystemAndEnvSecretStore-FIDC",
        "scopes": [
          "openid",
          "profile",
          "email",
          "webfiling"
        ],
        "tokenEndpointAuthMethod": "client_secret_post"
      }
    }
  ],
  "handler": {
    "type": "DispatchHandler",
    "config": {
      "bindings": [
        {
          "condition": "${matches(request.uri.path, '^//submissions') or matches(request.uri.path, '^//submissionData') or matches(request.uri.path, '^//paymentResource') or matches(request.uri.path, '^//authorisedFilersEmails')}",
          "handler": {
            "type": "Chain",
            "config": {
              "filters": [
              ],
              "handler": "ReverseProxyHandler"
            }
          }
        },
        {
          "condition": "${matches(request.uri.path, '^/file-for-a-company')}",
          "handler": {
            "type": "ScriptableHandler",
            "name": "ScriptableHandler-Start",
            "config": {
              "type": "application/x-groovy",
              "file": "start.groovy",
              "args": {
                "igHost": "&{ig.host}"
              }
            }
          }
        },
        {
          "condition": "${matches(request.uri.path, '^/request-auth-code') or matches(request.uri.path, '^/recent-filings')}",
          "handler": {
            "type": "ScriptableHandler",
            "name": "ScriptableHandler-Post-SecLogin-Redirects",
            "config": {
              "type": "application/x-groovy",
              "file": "postSecLoginRedirect.groovy",
              "args": {
                "igHost": "&{ig.host}"
              }
            }
          }
        },
        {
          "handler": {
            "name": "OIDC Handler",
            "type": "Chain",
            "config": {
              "filters": [
                {
                  "type": "ForwardedRequestFilter",
                  "config": {
                    "scheme": "${request.headers['X-Forwarded-Proto'][0]}",
                    "host": "${split(request.headers['Host'][0], ':')[0]}",
                    "port": "${integer(request.headers['X-Forwarded-Port'][0])}"
                  }
                },
                {
                  "name": "AuthRedirectFilter",
                  "type": "ScriptableFilter",
                  "config": {
                    "type": "application/x-groovy",
                    "file": "authRedirect.groovy",
                    "args": {
                      "routeArgAuthUri": "&{ui.url}",
                      "routeArgLoginPath": "&{login.path}",
                      "routeArgRealm": "&{fidc.realm}",
                      "routeArgLoginJourney": "&{fidc.login.journey}",
                      "routeArgMainJourney": "&{fidc.main.journey}",
                      "routeArgFidcFqdn": "&{fidc.fqdn}",
                      "routeArgErrorPath": "&{error.path}",
                      "routeArgManagePath": "&{manage.path}",
                      "routeArgCompaniesPath": "&{companies.path}"
                    }
                  }
                },
                {
                  "name": "OAuth2ClientFilter-FIDC",
                  "type": "OAuth2ClientFilter",
                  "config": {
                    "clientEndpoint": "/oidc",
                    "failureHandler": {
                      "type": "StaticResponseHandler",
                      "config": {
                        "status": 302,
                        "headers": {
                          "Location": [
                            "/oidc/logout"
                          ]
                        }
                      }
                    },
                    "registrations": [
                      "ClientRegistration-FIDC"
                    ],
                    "requireHttps": false,
                    "cacheExpiration": "disabled",
                    "defaultLogoutGoto": "/"
                  }
                },
                {
                  "type": "ConditionalFilter",
                  "config": {
                    "condition": "${matches(request.uri.path, '^/com-signout')}",
                    "delegate": {
                      "type": "HeaderFilter",
                      "config": {
                        "messageType": "RESPONSE",
                        "remove": [
                          "location"
                        ],
                        "add": {
                          "location": [
                            "/com-logout?silent=1"
                          ]
                        }
                      }
                    }
                  }
                },
                {
                  "type": "ConditionalFilter",
                  "config": {
                    "condition": "${matches(request.uri.path, '^/file-for-another-company') or matches(request.uri.path, '^/idam-logout')}",
                    "delegate": {
                      "type": "StaticRequestFilter",
                      "config": {
                        "method": "GET",
                        "uri": "https://&{application.host}/com-logout?silent=1&companySelect=1"
                      }
                    }
                  }
                },
                {
                  "type": "ConditionalFilter",
                  "config": {
                    "condition": "${matches(request.uri.path, '^/com-logout')}",
                    "delegate": {
                      "type": "HeaderFilter",
                      "config": {
                        "messageType": "RESPONSE",
                        "remove": [
                          "location"
                        ],
                        "add": {
                          "location": [
                            "/oidc/logout?goto=${urlEncode('https://&{ig.host}:443//seclogin?')}${urlEncode(request.uri.query)}"
                          ]
                        }
                      }
                    }
                  }
                },
                {
                  "type": "ConditionalFilter",
                  "config": {
                    "condition": "${matches(request.uri.path, '^/com-logout') && !contains(request.uri.query,'companySelect=1')}",
                    "delegate": {
                      "type": "ScriptableFilter",
                      "config": {
                        "type": "application/x-groovy",
                        "file": "endSession.groovy",
                        "args": {
                          "routeArgIamFqdn": "&{fidc.fqdn}",
                          "routeArgRealm": "&{fidc.realm}"
                        }
                      }
                    }
                  }
                },
                {
                  "name": "logs",
                  "type": "ScriptableFilter",
                  "config": {
                    "type": "application/x-groovy",
                    "file": "script.groovy"
                  }
                },
                {
                  "type": "ConditionalFilter",
                  "config": {
                    "condition": "${matches(request.uri.path,'^//seclogin')}",
                    "delegate": {
                      "type": "ScriptableFilter",
                      "config": {
                        "type": "application/x-groovy",
                        "file": "errorRedirect.groovy",
                        "args": {
                          "routeArgAuthUri": "&{ui.url}",
                          "routeArgErrorPath": "&{error.path}",
                          "routeArgContext": "seclogin"
                        }
                      }
                    }
                  }
                },
                {
                  "type": "ConditionalFilter",
                  "config": {
                    "condition": "${contains(request.uri.query,'page=companyAuthorisation')}",
                    "delegate": {
                      "type": "ScriptableFilter",
                      "config": {
                        "type": "application/x-groovy",
                        "file": "errorRedirect.groovy",
                        "args": {
                          "routeArgAuthUri": "&{ui.url}",
                          "routeArgErrorPath": "&{error.path}",
                          "routeArgContext": "companyAuthorisation"
                        }
                      }
                    }
                  }
                },
                {
                  "type": "ConditionalFilter",
                  "config": {
                    "condition": "${matches(request.uri.path,'^//seclogin') and contains(request.uri.query,'postSecLoginRedirect')}",
                    "delegate": {
                      "type": "ScriptableFilter",
                      "config": {
                        "type": "application/x-groovy",
                        "file": "postSecLoginRedirect.groovy",
                        "args": {
                          "igHost": "&{ig.host}"
                        }
                      }
                    }
                  }
                },
                {
                  "type": "PasswordReplayFilter",
                  "config": {
                    "loginPage": "${matches(request.uri.path,'^//seclogin')}",
                    "request": {
                      "method": "POST",
                      "uri": "https://&{application.host}//seclogin?tc=1",
                      "headers": {
                        "Content-Type": [
                          "application/x-www-form-urlencoded"
                        ]
                      },
                      "entity": "email=${attributes.openid.id_token_claims['email']}&seccode=${attributes.openid.id_token_claims['webfiling_info'].password}&submit=Sign+in&lang=${attributes.openid.id_token_claims['webfiling_info'].language}"
                    }
                  }
                },
                {
                  "type": "PasswordReplayFilter",
                  "config": {
                    "loginPage": "${contains(request.uri.query,'page=companyAuthorisation')}",
                    "loginPageExtractions": [
                      {
                        "name": "viewstate",
                        "pattern": "name=\"__VIEWSTATE\" value=\"(.*?)\""
                      }
                    ],
                    "request": {
                      "method": "POST",
                      "uri": "https://&{application.host}${request.uri.path}?${request.uri.query}",
                      "headers": {
                        "Content-Type": [
                          "application/x-www-form-urlencoded"
                        ]
                      },
                      "entity": "companySignInPage.companySignInForm.coType=${attributes.openid.id_token_claims['webfiling_info'].jurisdiction}&companySignInPage.companySignInForm.coNum=${attributes.openid.id_token_claims['webfiling_info'].company_no}&companySignInPage.companySignInForm.authCode=${attributes.openid.id_token_claims['webfiling_info'].auth_code}&companySignInPage.submit=Sign+in&__VIEWSTATE=${formEncodeParameterNameOrValue(attributes.extracted.viewstate)}"
                    }
                  }
                },
                {
                  "type": "CookieFilter",
                  "config": {
                    "defaultAction": "MANAGE"
                  }
                }
              ],
              "handler": "ReverseProxyHandler"
            }
          }
        }
      ]
    }
  }
}