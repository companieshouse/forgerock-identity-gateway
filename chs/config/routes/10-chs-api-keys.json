{
  "name": "CHS API Keys",
  "baseURI": "https://&{api.load.balancer}",
  "condition": "${contains(request.headers['Authorization'][0], 'Bearer')}",
  "globalDecorators": {
    "capture": "all"
  },
  "heap": [
    {
      "name": "Continue",
      "type": "Delegate",
      "MyCapture": "all",
      "config": {
        "delegate": "ForgeRockClientHandler"
      }
    },
    {
      "name": "ReverseProxyHandler",
      "type": "ReverseProxyHandler",
      "capture": [
        "request",
        "response"
      ],
      "config": {
        "tls": {
          "type": "ClientTlsOptions",
          "config": {
            "trustManager": {
              "type": "TrustAllManager"
            }
          }
        },
        "hostnameVerifier": "ALLOW_ALL"
      }
    },
    {
      "name": "SystemAndEnvSecretStore-FIDC",
      "type": "SystemAndEnvSecretStore"
    },
    {
      "name": "SecretKeyPropertyFormat-SigningKey",
      "type": "SecretKeyPropertyFormat",
      "config": {
        "format": "BASE64",
        "algorithm": "AES"
      }
    },
    {
      "name": "SecretsProvider-FIDC",
      "type": "SecretsProvider",
      "config": {
        "stores": [
          {
            "type": "SystemAndEnvSecretStore",
            "config": {
              "mappings": [
                {
                  "secretId": "signing.key.secret.id",
                  "format": "SecretKeyPropertyFormat-SigningKey"
                }
              ]
            }
          }
        ]
      }
    }
  ],
  "handler": {
    "name": "OIDC Handler",
    "type": "Chain",
    "config": {
      "filters": [
        {
          "type": "ForwardedRequestFilter",
          "config": {
            "scheme": "${request.headers['X-Forwarded-Proto'][0]}",
            "host": "${split(request.headers['Host'][0], ':')[0]}",
            "port": "${integer(request.headers['X-Forwarded-Port'][0])}"
          }
        },
        {
          "name": "OAuth2ResourceServerFilter-FIDC",
          "type": "OAuth2ResourceServerFilter",
          "config": {
            "scopes": {
              "name": "myscript",
              "type": "ScriptableResourceAccess",
              "config": {
                "type": "application/x-groovy",
                "source": [
                  "// Minimal set of required scopes",
                  "def scopes = [ 'mail' ] as Set",
                  "if (request.uri.path =~ /employee$/) {",
                  "  // Require another scope to access this resource",
                  "  scopes += 'employeenumber'",
                  "}",
                  "return scopes"
                ]
              }
            },
            "requireHttps": false,
            "realm": "OpenIG",
            "accessTokenResolver": {
              "name": "TokenIntrospectionAccessTokenResolver-FIDC",
              "type": "TokenIntrospectionAccessTokenResolver",
              "config": {
                "endpoint": "https://&{fidc.fqdn}/am/oauth2/introspect",
                "providerHandler": {
                  "type": "Chain",
                  "config": {
                    "filters": [
                      {
                        "type": "HeaderFilter",
                        "config": {
                          "messageType": "request",
                          "add": {
                            "Authorization": [ "Basic ${encodeBase64('request.headers['client_id'][0]:request.headers['client_secret'][0]')}" ]
                          }
                        }
                      }
                    ],
                    "handler": "ForgeRockClientHandler"
                  }
                }
              }
            }
          }
        },
        {
          "name": "AddERICPassthroughAttributes",
          "type": "ScriptableFilter",
          "config": {
            "type": "application/x-groovy",
            "file": "addERICPassthroughAttributes.groovy"
          }
        },
        {
          "name": "JwtBuilderFilter-ERIC",
          "type": "JwtBuilderFilter",
          "config": {
              "template": {
                "claims": "{${attributes.ericSubject},${attributes.ericIssuer},${attributes.ericExpiry}}"
              },
              "secretsProvider": "SecretsProvider-FIDC",
              "encryption": {
                "secretId": "signing.key.secret.id",
                "algorithm": "dir",
                "method": "A128CBC-HS256"
              }
          }
        },
        {
          "name": "HeaderFilter-ERIC",
          "type": "HeaderFilter",
          "config": {
            "messageType": "REQUEST",
            "add": {
              "Authorization": [ "Bearer eric.${contexts.jwtBuilder.value}" ],
              "ERIC-Authorised-User": [ "test@test.com" ],
              "ERIC-Authorised-Scope": [ "${contexts.oauth2.accessToken.scopes}" ],
              "ERIC-Authorised-Token-Permissions": [ "${contexts.oauth2.accessToken.info.token_permissions}" ],
              "ERIC-Authorised-Roles": [ "/admin/transaction-lookup" ],
              "ERIC-Application-ID": [ "${contexts.oauth2.accessToken.info.client-id}" ]
            }
          }
        }
      ],
      "handler": "ReverseProxyHandler"
    }
  }
}